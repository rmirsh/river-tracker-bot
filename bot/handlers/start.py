from aiogram import Router, types, F
from aiogram.filters import CommandStart

from bot.db.crud.requests import is_first_time, set_first_time
from bot.keyboards import get_town_kb
from parser import river_parser

router = Router()


@router.message(CommandStart())
async def cmd_start(message: types.Message):
    """Start command handler for the bot.

    Greets the user with a personalized message and prompts them to select a
    town.

    Args:
        message (types.Message): The message object containing user information.
    """

    # await message.answer(
    #     f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>! <u><i>–Ø –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i></u>"
    # )

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>!\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç.",
        reply_markup=get_town_kb(),
    )

    if await is_first_time(message.from_user.id):
        await set_first_time(message.from_user.id)
        await message.answer(
            "–î–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è! üåü\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –ø–æ–ª—å–∑—É –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –ª—é–¥–µ–π –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏, "
            "–∞ —Ç–∞–∫–∂–µ <b><i>—Å–Ω—è—Ç—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å —É –ø–æ–∂–∏–ª—ã—Ö –ª—é–¥–µ–π –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≥–∞—Ä–∞–∂–µ–π –≤–¥–æ–ª—å —Ä–µ–∫.</i></b> "
            "–ï–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–Ω–∏–º–∞—é—Å—å <a href='tg://user?id=446913605'>—è</a>, –≤–∫–ª–∞–¥—ã–≤–∞—è –≤ –Ω–µ–≥–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É—Å–∏–ª–∏–π.\n"
            "–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –º–æ—è —Ä–∞–±–æ—Ç–∞ –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ "
            "(–ª—é–±–∞—è —É–¥–æ–±–Ω–∞—è –í–∞–º —Å—É–º–º–∞). –í–∞—à –≤–∫–ª–∞–¥ ‚ù§Ô∏è –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∏ —É–ª—É—á—à–∞—Ç—å —Å–µ—Ä–≤–∏—Å, "
            "–∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã. üèòÔ∏è\n\n"
            "–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –¥–æ–≤–µ—Ä–∏–µ! üôè"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–æ–Ω–∞—Ç, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π /donate."
        )


@router.callback_query(F.data.in_(river_parser.towns))
async def send_river_data(callback: types.CallbackQuery):
    """Send river data information based on the current river level compared to
    danger and prevention levels.

    Args:
        callback (types.CallbackQuery): The callback query object.
    """

    river_data = await river_parser.fetch_river_data(callback.data)
    date = river_data.time.split()[0]
    time = river_data.time.split()[1][:-3]

    if river_data.current_river_level >= river_data.danger_level:
        answer_message = f"<b>‚ÄºÔ∏èÔ∏è–û–ü–ê–°–ù–û–°–¢–¨‚ÄºÔ∏è\n<u>–ù–∞ {date} –≤ {time} –≤ –í–∞—à–µ–º –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–ø–∞—Å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã.</u></b>"
        await callback.message.answer(answer_message)

    elif river_data.current_river_level >= river_data.prevention_level:
        answer_message = f"<b>‚ùóÔ∏è–£–ì–†–û–ó–ê‚ùóÔ∏è\n–ù–∞ {date} –≤ {time} –≤ –í–∞—à–µ–º –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã.</b>"
        await callback.message.answer(answer_message)

    await callback.message.answer(
        f"<u>–ù–∞ {date} –≤ {time}, –≤ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ <i>{callback.data}</i>:</u>\n"
        f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã: <b>{river_data.current_river_level} –º</b>\n"
        f"–ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã: <b>{river_data.prevention_level} –º</b>\n"
        f"–û–ø–∞—Å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã: <b>{river_data.danger_level} –º</b>\n"
    )

    await callback.answer()
